function net = cnn_cifar_init_hopefast_2016(opts)

lr = [1 1] ;
lr_HOPE = [1 1];
beta = 1;
%weightDecay
wdr = [1 0];
lr_bnorm = [1 1]
wdr_bnorm = [0, 0]
epsilon = 1e-3
isHOPEBN = 0


net.layers = {} ;

% Block 0 hope_input
net.layers{end+1} = struct('type', 'hope_fast', ...
						   'weights', {{single(normrnd(0, sqrt(2/(3*3*20)), 3, 3, 3, 20)), zeros(1, 20, 'single')}}, ...
						   'beta', beta, ...
						   'learningRate', lr_HOPE, ...
						   'stride', 1, ...
						   'pad', 1, ...
						   'droprate', 0) ;%sqrt(2/(5*5*3))
						   
[H, W, C_in, C_out] = size(net.layers{end}.weights{1});				   
net.layers{end}.df_D = zeros(H, W, C_in, C_out, 'single');
net.layers{end}.H = H;
net.layers{end}.W = W;
net.layers{end}.C_in = C_in;
net.layers{end}.C_out = C_out;

if (isHOPEBN)
	net.layers{end+1} = struct('type', 'bnorm', ...
                           'weights', {{ones(24, 1, 'single'), zeros(24, 1, 'single')}}, ...
                           'learningRate', lr_bnorm, ...
                           'weightDecay', wdr_bnorm, ...
						   'Epsilon', epsilon) ;
end

% Block 1
net.layers{end+1} = struct('type', 'conv', ...
                           'weights', {{single(normrnd(0, sqrt(2/(3*3*64)), 3, 3, 20, 64)), zeros(1, 64, 'single')}}, ...
                           'learningRate', lr, ...
                           'stride', 1, ...
                           'pad', 1, ...
						   'droprate', 0.3) ;
net.layers{end+1} = struct('type', 'bnorm', ...
                           'weights', {{ones(64, 1, 'single'), zeros(64, 1, 'single')}}, ...
                           'learningRate', lr_bnorm, ...
                           'weightDecay', wdr_bnorm, ...
						   'Epsilon', epsilon) ;
net.layers{end+1} = struct('type', 'relu') ;
net.layers{end+1} = struct('type', 'dropout', 'rate', 0.3) ; 

net.layers{end+1} = struct('type', 'conv', ...
                           'weights', {{single(normrnd(0, sqrt(2/(3*3*64)), 3, 3, 64, 64)), zeros(1, 64, 'single')}}, ...
                           'learningRate', lr, ...
                           'stride', 1, ...
                           'pad', 1, ...
						   'droprate', 0) ;
net.layers{end+1} = struct('type', 'bnorm', ...
                           'weights', {{ones(64, 1, 'single'), zeros(64, 1, 'single')}}, ...
                           'learningRate', lr_bnorm, ...
                           'weightDecay', wdr_bnorm, ...
						   'Epsilon', epsilon) ;
net.layers{end+1} = struct('type', 'relu') ;
% net.layers{end+1} = struct('type', 'pool', ...
                           % 'method', 'max', ...
                           % 'pool', [2 2], ...
                           % 'stride', 2, ...
                           % 'pad', 0) ;

% % Hope-Pooling					   
net.layers{end+1} = struct('type', 'hope_fast', ...
						   'weights', {{single(normrnd(0, sqrt(2/(2*2*128)), 2, 2, 64, 128)), zeros(1, 128, 'single')}}, ...
						   'beta', beta, ...
						   'learningRate', lr_HOPE, ...
						   'stride', 2, ...
						   'pad', 0, ...
						   'droprate', 0) ;%sqrt(2/(5*5*3))
						   
[H, W, C_in, C_out] = size(net.layers{end}.weights{1});				   
net.layers{end}.df_D = zeros(H, W, C_in, C_out, 'single');
net.layers{end}.H = H;
net.layers{end}.W = W;
net.layers{end}.C_in = C_in;
net.layers{end}.C_out = C_out;

if (isHOPEBN)
	net.layers{end+1} = struct('type', 'bnorm', ...
                           'weights', {{ones(64, 1, 'single'), zeros(64, 1, 'single')}}, ...
                           'learningRate', lr_bnorm, ...
                           'weightDecay', wdr_bnorm, ...
						   'Epsilon', epsilon) ;
end

% Block 2
net.layers{end+1} = struct('type', 'conv', ...
                           'weights', {{single(normrnd(0, sqrt(2/(3*3*128)), 3, 3, 128, 128)), zeros(1,128,'single')}}, ...
                           'learningRate', lr, ...
                           'stride', 1, ...
                           'pad', 1, ...
						   'droprate', 0.40) ;
net.layers{end+1} = struct('type', 'bnorm', ...
                           'weights', {{ones(128, 1, 'single'), zeros(128, 1, 'single')}}, ...
                           'learningRate', lr_bnorm, ...
                           'weightDecay', wdr_bnorm, ...
						   'Epsilon', epsilon) ;
net.layers{end+1} = struct('type', 'relu') ;
net.layers{end+1} = struct('type', 'dropout', 'rate', 0.40) ;

net.layers{end+1} = struct('type', 'conv', ...
                           'weights', {{single(normrnd(0, sqrt(2/(3*3*128)), 3, 3, 128, 128)), zeros(1,128,'single')}}, ...
                           'learningRate', lr, ...
                           'stride', 1, ...
                           'pad', 1, ...
						   'droprate', 0) ;
net.layers{end+1} = struct('type', 'bnorm', ...
                           'weights', {{ones(128, 1, 'single'), zeros(128, 1, 'single')}}, ...
                           'learningRate', lr_bnorm, ...
                           'weightDecay', wdr_bnorm, ...
						   'Epsilon', epsilon) ;
net.layers{end+1} = struct('type', 'relu') ;
net.layers{end+1} = struct('type', 'pool', ...
                           'method', 'max', ...
                           'pool', [2 2], ...
                           'stride', 2, ...
                           'pad', 0) ; % Emulate caffe


% Block 3
net.layers{end+1} = struct('type', 'conv', ...
                           'weights', {{single(normrnd(0, sqrt(2/(3*3*256)), 3, 3, 128, 256)), zeros(1,256,'single')}}, ...
                           'learningRate', lr, ...
                           'stride', 1, ...
                           'pad', 1, ...
						   'droprate', 0.4) ;
net.layers{end+1} = struct('type', 'bnorm', ...
                           'weights', {{ones(256, 1, 'single'), zeros(256, 1, 'single')}}, ...
                           'learningRate', lr_bnorm, ...
                           'weightDecay', wdr_bnorm, ...
						   'Epsilon', epsilon) ;
net.layers{end+1} = struct('type', 'relu') ;
net.layers{end+1} = struct('type', 'dropout', 'rate', 0.4) ;

net.layers{end+1} = struct('type', 'conv', ...
                           'weights', {{single(normrnd(0, sqrt(2/(3*3*256)), 3, 3, 256, 256)), zeros(1,256,'single')}}, ...
                           'learningRate', lr, ...
                           'stride', 1, ...
                           'pad', 1, ...
						   'droprate', 0.4) ;
net.layers{end+1} = struct('type', 'bnorm', ...
                           'weights', {{ones(256, 1, 'single'), zeros(256, 1, 'single')}}, ...
                           'learningRate', lr_bnorm, ...
                           'weightDecay', wdr_bnorm, ...
						   'Epsilon', epsilon) ;
net.layers{end+1} = struct('type', 'relu') ;
net.layers{end+1} = struct('type', 'dropout', 'rate', 0.4) ;

net.layers{end+1} = struct('type', 'conv', ...
                           'weights', {{single(normrnd(0, sqrt(2/(3*3*256)), 3, 3, 256, 256)), zeros(1,256,'single')}}, ...
                           'learningRate', lr, ...
                           'stride', 1, ...
                           'pad', 1, ...
						   'droprate', 0) ;
net.layers{end+1} = struct('type', 'bnorm', ...
                           'weights', {{ones(256, 1, 'single'), zeros(256, 1, 'single')}}, ...
                           'learningRate', lr_bnorm, ...
                           'weightDecay', wdr_bnorm, ...
						   'Epsilon', epsilon) ;
net.layers{end+1} = struct('type', 'relu') ;
net.layers{end+1} = struct('type', 'pool', ...
                           'method', 'max', ...
                           'pool', [2 2], ...
                           'stride', 2, ...
                           'pad', 0) ; % Emulate caffe


% Block 4
net.layers{end+1} = struct('type', 'conv', ...
                           'weights', {{single(normrnd(0, sqrt(2/(3*3*512)), 3, 3, 256, 512)), zeros(1,512,'single')}}, ...
                           'learningRate', lr, ...
                           'stride', 1, ...
                           'pad', 1, ...
						   'droprate', 0.4) ;
net.layers{end+1} = struct('type', 'bnorm', ...
                           'weights', {{ones(512, 1, 'single'), zeros(512, 1, 'single')}}, ...
                           'learningRate', lr_bnorm, ...
                           'weightDecay', wdr_bnorm, ...
						   'Epsilon', epsilon) ;
net.layers{end+1} = struct('type', 'relu') ;
net.layers{end+1} = struct('type', 'dropout', 'rate', 0.4) ;

net.layers{end+1} = struct('type', 'conv', ...
                           'weights', {{single(normrnd(0, sqrt(2/(3*3*512)), 3, 3, 512, 512)), zeros(1,512,'single')}}, ...
                           'learningRate', lr, ...
                           'stride', 1, ...
                           'pad', 1, ...
						   'droprate', 0.4) ;
net.layers{end+1} = struct('type', 'bnorm', ...
                           'weights', {{ones(512, 1, 'single'), zeros(512, 1, 'single')}}, ...
                           'learningRate', lr_bnorm, ...
                           'weightDecay', wdr_bnorm, ...
						   'Epsilon', epsilon) ;
net.layers{end+1} = struct('type', 'relu') ;
net.layers{end+1} = struct('type', 'dropout', 'rate', 0.4) ;

net.layers{end+1} = struct('type', 'conv', ...
                           'weights', {{single(normrnd(0, sqrt(2/(3*3*512)), 3, 3, 512, 512)), zeros(1,512,'single')}}, ...
                           'learningRate', lr, ...
                           'stride', 1, ...
                           'pad', 1, ...
						   'droprate', 0) ;
net.layers{end+1} = struct('type', 'bnorm', ...
                           'weights', {{ones(512, 1, 'single'), zeros(512, 1, 'single')}}, ...
                           'learningRate', lr_bnorm, ...
                           'weightDecay', wdr_bnorm, ...
						   'Epsilon', epsilon) ;
net.layers{end+1} = struct('type', 'relu') ;
net.layers{end+1} = struct('type', 'pool', ...
                           'method', 'max', ...
                           'pool', [2 2], ...
                           'stride', 2, ...
                           'pad', 0) ;

% Block 5
net.layers{end+1} = struct('type', 'conv', ...
                           'weights', {{single(normrnd(0, sqrt(2/(3*3*512)), 3, 3, 512, 512)), zeros(1,512,'single')}}, ...
                           'learningRate', lr, ...
                           'stride', 1, ...
                           'pad', 1, ...
						   'droprate', 0.4) ;
net.layers{end+1} = struct('type', 'bnorm', ...
                           'weights', {{ones(512, 1, 'single'), zeros(512, 1, 'single')}}, ...
                           'learningRate', lr_bnorm, ...
                           'weightDecay', wdr_bnorm, ...
						   'Epsilon', epsilon) ;
net.layers{end+1} = struct('type', 'relu') ;
net.layers{end+1} = struct('type', 'dropout', 'rate', 0.4) ;

net.layers{end+1} = struct('type', 'conv', ...
                           'weights', {{single(normrnd(0, sqrt(2/(3*3*512)), 3, 3, 512, 512)), zeros(1,512,'single')}}, ...
                           'learningRate', lr, ...
                           'stride', 1, ...
                           'pad', 1, ...
						   'droprate', 0.4) ;
net.layers{end+1} = struct('type', 'bnorm', ...
                           'weights', {{ones(512, 1, 'single'), zeros(512, 1, 'single')}}, ...
                           'learningRate', lr_bnorm, ...
                           'weightDecay', wdr_bnorm, ...
						   'Epsilon', epsilon) ;
net.layers{end+1} = struct('type', 'relu') ;
net.layers{end+1} = struct('type', 'dropout', 'rate', 0.4) ;

net.layers{end+1} = struct('type', 'conv', ...
                           'weights', {{single(normrnd(0, 0.01, 3, 3, 512, 512)), zeros(1,512,'single')}}, ...
                           'learningRate', lr, ...
                           'stride', 1, ...
                           'pad', 1, ...
						   'droprate', 0.5) ;
net.layers{end+1} = struct('type', 'bnorm', ...
                           'weights', {{ones(512, 1, 'single'), zeros(512, 1, 'single')}}, ...
                           'learningRate', lr_bnorm, ...
                           'weightDecay', wdr_bnorm, ...
						   'Epsilon', epsilon) ;
net.layers{end+1} = struct('type', 'relu') ;
net.layers{end+1} = struct('type', 'pool', ...
                           'method', 'max', ...
                           'pool', [2 2], ...
                           'stride', 2, ...
                           'pad', 0) ;
net.layers{end+1} = struct('type', 'dropout', 'rate', 0.5) ;
						   
% Block 6
net.layers{end+1} = struct('type', 'conv', ...
                           'weights', {{single(normrnd(0, 0.01, 1, 1, 512, 512)), zeros(1,512,'single')}}, ...
                           'learningRate', lr, ...
						   'weightDecay', wdr, ...
                           'stride', 1, ...
                           'pad', 0, ...
						   'droprate', 0.5) ;
net.layers{end+1} = struct('type', 'bnorm', ...
                           'weights', {{ones(512, 1, 'single'), zeros(512, 1, 'single')}}, ...
                           'learningRate', lr_bnorm, ...
                           'weightDecay', wdr_bnorm, ...
						   'Epsilon', epsilon) ;
net.layers{end+1} = struct('type', 'relu') ;
net.layers{end+1} = struct('type', 'dropout', 'rate', 0.5) ;

% Block 7
net.layers{end+1} = struct('type', 'conv', ...
                           'weights', {{single(normrnd(0, 0.001, 1, 1, 512, 10)), zeros(1,10,'single')}}, ...
                           'learningRate', lr, ...
						   'weightDecay', wdr, ...
                           'stride', 1, ...
                           'pad', 0, ...
						   'droprate', 0) ;

% Loss layer
net.layers{end+1} = struct('type', 'softmaxloss') ;